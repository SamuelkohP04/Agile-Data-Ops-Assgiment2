{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.9", "generated_at": "2024-01-06T07:28:13.107549Z", "invocation_id": "fb799feb-5aca-4cd6-9db0-e6b17219352e", "env": {}, "project_id": "72dd17ecd2ebcbaffe2aa2eb90e3eca2", "user_id": "db5b9f6f-c2c4-4888-9ed4-f62afaa43056", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.ADO_Assignment_updated.raw_category": {"database": "Assignment2", "schema": "NWT", "name": "raw_category", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_category.sql", "original_file_path": "models\\raw\\raw_category.sql", "unique_id": "model.ADO_Assignment_updated.raw_category", "fqn": ["ADO_Assignment_updated", "raw", "raw_category"], "alias": "raw_category", "checksum": {"name": "sha256", "checksum": "fac0163ae69adecda511d0a4fe679af482567b1c15c2274972978b2d8bebb9f2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"CATEGORYID": {"name": "CATEGORYID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CATEGORYNAME": {"name": "CATEGORYNAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PICTURE": {"name": "PICTURE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ADO_Assignment_updated://models\\raw\\raw_test.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1704516961.9761193, "relation_name": "Assignment2.NWT.raw_category", "raw_code": "{{ config (materialized='view')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.CATEGORY", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.ADO_Assignment_updated.raw_employee_territory": {"database": "Assignment2", "schema": "NWT", "name": "raw_employee_territory", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_employee_territory.sql", "original_file_path": "models\\raw\\raw_employee_territory.sql", "unique_id": "model.ADO_Assignment_updated.raw_employee_territory", "fqn": ["ADO_Assignment_updated", "raw", "raw_employee_territory"], "alias": "raw_employee_territory", "checksum": {"name": "sha256", "checksum": "9b25f03f1886f3a911af2bf879ab263b0d101214b2d776a92cd0f642f5d75b6d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"EMPLOYEEID": {"name": "EMPLOYEEID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TERRITORYID": {"name": "TERRITORYID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ADO_Assignment_updated://models\\raw\\raw_test.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1704516961.9870405, "relation_name": "Assignment2.NWT.raw_employee_territory", "raw_code": "{{ config (materialized='table')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.EMPLOYEETERRITORY", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.ADO_Assignment_updated.raw_order_details": {"database": "Assignment2", "schema": "NWT", "name": "raw_order_details", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_order_details.sql", "original_file_path": "models\\raw\\raw_order_details.sql", "unique_id": "model.ADO_Assignment_updated.raw_order_details", "fqn": ["ADO_Assignment_updated", "raw", "raw_order_details"], "alias": "raw_order_details", "checksum": {"name": "sha256", "checksum": "616e9a18494b485764df9f3fe0b1f2e90c3eae7b6e03bf2a7785a21c508483b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1704516961.9287736, "relation_name": "Assignment2.NWT.raw_order_details", "raw_code": "{{ config (materialized='table')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.ORDER_DETAIL", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.ADO_Assignment_updated.raw_region": {"database": "Assignment2", "schema": "NWT", "name": "raw_region", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_region.sql", "original_file_path": "models\\raw\\raw_region.sql", "unique_id": "model.ADO_Assignment_updated.raw_region", "fqn": ["ADO_Assignment_updated", "raw", "raw_region"], "alias": "raw_region", "checksum": {"name": "sha256", "checksum": "eaca917936f50c72aa4cdbeba0721d4731d0f81618a36e69cd2eb75bffdc7e20"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"REGIONID": {"name": "REGIONID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REGIONDESCRIPTION": {"name": "REGIONDESCRIPTION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ADO_Assignment_updated://models\\raw\\raw_test.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1704516961.9879875, "relation_name": "Assignment2.NWT.raw_region", "raw_code": "{{ config (materialized='table')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.REGION", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.ADO_Assignment_updated.raw_shipper": {"database": "Assignment2", "schema": "NWT", "name": "raw_shipper", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_shipper.sql", "original_file_path": "models\\raw\\raw_shipper.sql", "unique_id": "model.ADO_Assignment_updated.raw_shipper", "fqn": ["ADO_Assignment_updated", "raw", "raw_shipper"], "alias": "raw_shipper", "checksum": {"name": "sha256", "checksum": "bac7683116d59bdbe808e121d30fc4cb29f9699066690dee4e7aecd28f8d119a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"SHIPPERID": {"name": "SHIPPERID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMPANYNAME": {"name": "COMPANYNAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PHONE": {"name": "PHONE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ADO_Assignment_updated://models\\raw\\raw_test.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1704516961.996572, "relation_name": "Assignment2.NWT.raw_shipper", "raw_code": "{{ config (materialized='table')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.SHIPPER", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.ADO_Assignment_updated.raw_supplier": {"database": "Assignment2", "schema": "NWT", "name": "raw_supplier", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_supplier.sql", "original_file_path": "models\\raw\\raw_supplier.sql", "unique_id": "model.ADO_Assignment_updated.raw_supplier", "fqn": ["ADO_Assignment_updated", "raw", "raw_supplier"], "alias": "raw_supplier", "checksum": {"name": "sha256", "checksum": "643827f4a5818facfda01e5d932467b8907a74e1b07fdf0b84859395f6f199aa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"SUPPLIERID": {"name": "SUPPLIERID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMPANYNAME": {"name": "COMPANYNAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CONTACTNAME": {"name": "CONTACTNAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CONTACTTITLE": {"name": "CONTACTTITLE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CITY": {"name": "CITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REGION": {"name": "REGION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POSTALCODE": {"name": "POSTALCODE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COUNTRY": {"name": "COUNTRY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PHONE": {"name": "PHONE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FAX": {"name": "FAX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HOMEPAGE": {"name": "HOMEPAGE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ADO_Assignment_updated://models\\raw\\raw_test.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1704516961.995503, "relation_name": "Assignment2.NWT.raw_supplier", "raw_code": "{{ config (materialized='table')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.SUPPLIER", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.ADO_Assignment_updated.raw_territory": {"database": "Assignment2", "schema": "NWT", "name": "raw_territory", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_territory.sql", "original_file_path": "models\\raw\\raw_territory.sql", "unique_id": "model.ADO_Assignment_updated.raw_territory", "fqn": ["ADO_Assignment_updated", "raw", "raw_territory"], "alias": "raw_territory", "checksum": {"name": "sha256", "checksum": "ec41a80987c7bba2684b5aebe89d41ec68d3702d951c64f5cf26c66f77ba3484"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"TERRITORYID": {"name": "TERRITORYID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TERRITORYDESCRIPTION": {"name": "TERRITORYDESCRIPTION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REGIONID": {"name": "REGIONID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ADO_Assignment_updated://models\\raw\\raw_test.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1704516961.9909766, "relation_name": "Assignment2.NWT.raw_territory", "raw_code": "{{ config (materialized='table')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.TERRITORY", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.ADO_Assignment_updated.unique_raw_category_CATEGORYID.a1b8a7eaa8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "CATEGORYID", "model": "{{ get_where_subquery(ref('raw_category')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_category_CATEGORYID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_category_CATEGORYID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_category_CATEGORYID.a1b8a7eaa8", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_category_CATEGORYID"], "alias": "unique_raw_category_CATEGORYID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_category_CATEGORYID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0685766, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_category"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_category_CATEGORYID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    CATEGORYID as unique_field,\n    count(*) as n_records\n\nfrom Assignment2.NWT.raw_category\nwhere CATEGORYID is not null\ngroup by CATEGORYID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CATEGORYID", "file_key_name": "models.raw_category", "attached_node": "model.ADO_Assignment_updated.raw_category"}, "test.ADO_Assignment_updated.not_null_raw_category_CATEGORYID.3b1d8fbba2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CATEGORYID", "model": "{{ get_where_subquery(ref('raw_category')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_category_CATEGORYID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_category_CATEGORYID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_category_CATEGORYID.3b1d8fbba2", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_category_CATEGORYID"], "alias": "not_null_raw_category_CATEGORYID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_category_CATEGORYID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0704842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_category"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_category_CATEGORYID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CATEGORYID\nfrom Assignment2.NWT.raw_category\nwhere CATEGORYID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CATEGORYID", "file_key_name": "models.raw_category", "attached_node": "model.ADO_Assignment_updated.raw_category"}, "test.ADO_Assignment_updated.not_null_raw_category_CATEGORYNAME.a317f17f5b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CATEGORYNAME", "model": "{{ get_where_subquery(ref('raw_category')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_category_CATEGORYNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_category_CATEGORYNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_category_CATEGORYNAME.a317f17f5b", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_category_CATEGORYNAME"], "alias": "not_null_raw_category_CATEGORYNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_category_CATEGORYNAME.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.073071, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_category"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_category_CATEGORYNAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CATEGORYNAME\nfrom Assignment2.NWT.raw_category\nwhere CATEGORYNAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CATEGORYNAME", "file_key_name": "models.raw_category", "attached_node": "model.ADO_Assignment_updated.raw_category"}, "test.ADO_Assignment_updated.not_null_raw_category_DESCRIPTION.2133efedca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "DESCRIPTION", "model": "{{ get_where_subquery(ref('raw_category')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_category_DESCRIPTION", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_category_DESCRIPTION.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_category_DESCRIPTION.2133efedca", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_category_DESCRIPTION"], "alias": "not_null_raw_category_DESCRIPTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_category_DESCRIPTION.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.075067, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_category"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_category_DESCRIPTION.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect DESCRIPTION\nfrom Assignment2.NWT.raw_category\nwhere DESCRIPTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "DESCRIPTION", "file_key_name": "models.raw_category", "attached_node": "model.ADO_Assignment_updated.raw_category"}, "test.ADO_Assignment_updated.not_null_raw_category_PICTURE.c5c3735301": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PICTURE", "model": "{{ get_where_subquery(ref('raw_category')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_category_PICTURE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_category_PICTURE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_category_PICTURE.c5c3735301", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_category_PICTURE"], "alias": "not_null_raw_category_PICTURE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_category_PICTURE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.077136, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_category"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_category_PICTURE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PICTURE\nfrom Assignment2.NWT.raw_category\nwhere PICTURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PICTURE", "file_key_name": "models.raw_category", "attached_node": "model.ADO_Assignment_updated.raw_category"}, "test.ADO_Assignment_updated.not_null_raw_employee_territory_EMPLOYEEID.9d44243c38": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMPLOYEEID", "model": "{{ get_where_subquery(ref('raw_employee_territory')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_territory_EMPLOYEEID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_territory_EMPLOYEEID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_territory_EMPLOYEEID.9d44243c38", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_territory_EMPLOYEEID"], "alias": "not_null_raw_employee_territory_EMPLOYEEID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_territory_EMPLOYEEID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.135751, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee_territory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee_territory"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_territory_EMPLOYEEID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect EMPLOYEEID\nfrom Assignment2.NWT.raw_employee_territory\nwhere EMPLOYEEID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "EMPLOYEEID", "file_key_name": "models.raw_employee_territory", "attached_node": "model.ADO_Assignment_updated.raw_employee_territory"}, "test.ADO_Assignment_updated.not_null_raw_employee_territory_TERRITORYID.d1114c5961": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TERRITORYID", "model": "{{ get_where_subquery(ref('raw_employee_territory')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_territory_TERRITORYID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_territory_TERRITORYID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_territory_TERRITORYID.d1114c5961", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_territory_TERRITORYID"], "alias": "not_null_raw_employee_territory_TERRITORYID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_territory_TERRITORYID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1387305, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee_territory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee_territory"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_territory_TERRITORYID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TERRITORYID\nfrom Assignment2.NWT.raw_employee_territory\nwhere TERRITORYID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TERRITORYID", "file_key_name": "models.raw_employee_territory", "attached_node": "model.ADO_Assignment_updated.raw_employee_territory"}, "test.ADO_Assignment_updated.unique_raw_region_REGIONID.22984d02c1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "REGIONID", "model": "{{ get_where_subquery(ref('raw_region')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_region_REGIONID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_region_REGIONID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_region_REGIONID.22984d02c1", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_region_REGIONID"], "alias": "unique_raw_region_REGIONID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_region_REGIONID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1407242, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_region", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_region"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_region_REGIONID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    REGIONID as unique_field,\n    count(*) as n_records\n\nfrom Assignment2.NWT.raw_region\nwhere REGIONID is not null\ngroup by REGIONID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "REGIONID", "file_key_name": "models.raw_region", "attached_node": "model.ADO_Assignment_updated.raw_region"}, "test.ADO_Assignment_updated.not_null_raw_region_REGIONID.edf655c866": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "REGIONID", "model": "{{ get_where_subquery(ref('raw_region')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_region_REGIONID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_region_REGIONID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_region_REGIONID.edf655c866", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_region_REGIONID"], "alias": "not_null_raw_region_REGIONID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_region_REGIONID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1442423, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_region", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_region"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_region_REGIONID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect REGIONID\nfrom Assignment2.NWT.raw_region\nwhere REGIONID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "REGIONID", "file_key_name": "models.raw_region", "attached_node": "model.ADO_Assignment_updated.raw_region"}, "test.ADO_Assignment_updated.not_null_raw_region_REGIONDESCRIPTION.8d19875120": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "REGIONDESCRIPTION", "model": "{{ get_where_subquery(ref('raw_region')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_region_REGIONDESCRIPTION", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_region_REGIONDESCRIPTION.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_region_REGIONDESCRIPTION.8d19875120", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_region_REGIONDESCRIPTION"], "alias": "not_null_raw_region_REGIONDESCRIPTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_region_REGIONDESCRIPTION.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1462324, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_region", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_region"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_region_REGIONDESCRIPTION.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect REGIONDESCRIPTION\nfrom Assignment2.NWT.raw_region\nwhere REGIONDESCRIPTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "REGIONDESCRIPTION", "file_key_name": "models.raw_region", "attached_node": "model.ADO_Assignment_updated.raw_region"}, "test.ADO_Assignment_updated.unique_raw_territory_TERRITORYID.761def669e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "TERRITORYID", "model": "{{ get_where_subquery(ref('raw_territory')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_territory_TERRITORYID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_territory_TERRITORYID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_territory_TERRITORYID.761def669e", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_territory_TERRITORYID"], "alias": "unique_raw_territory_TERRITORYID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_territory_TERRITORYID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.149212, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_territory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_territory"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_territory_TERRITORYID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    TERRITORYID as unique_field,\n    count(*) as n_records\n\nfrom Assignment2.NWT.raw_territory\nwhere TERRITORYID is not null\ngroup by TERRITORYID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TERRITORYID", "file_key_name": "models.raw_territory", "attached_node": "model.ADO_Assignment_updated.raw_territory"}, "test.ADO_Assignment_updated.not_null_raw_territory_TERRITORYID.c3a89952f0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TERRITORYID", "model": "{{ get_where_subquery(ref('raw_territory')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_territory_TERRITORYID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_territory_TERRITORYID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_territory_TERRITORYID.c3a89952f0", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_territory_TERRITORYID"], "alias": "not_null_raw_territory_TERRITORYID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_territory_TERRITORYID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1522026, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_territory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_territory"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_territory_TERRITORYID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TERRITORYID\nfrom Assignment2.NWT.raw_territory\nwhere TERRITORYID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TERRITORYID", "file_key_name": "models.raw_territory", "attached_node": "model.ADO_Assignment_updated.raw_territory"}, "test.ADO_Assignment_updated.not_null_raw_territory_TERRITORYDESCRIPTION.b0601fdc23": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TERRITORYDESCRIPTION", "model": "{{ get_where_subquery(ref('raw_territory')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_territory_TERRITORYDESCRIPTION", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_territory_TERRITORYDESCRIPTION.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_territory_TERRITORYDESCRIPTION.b0601fdc23", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_territory_TERRITORYDESCRIPTION"], "alias": "not_null_raw_territory_TERRITORYDESCRIPTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_territory_TERRITORYDESCRIPTION.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.153705, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_territory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_territory"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_territory_TERRITORYDESCRIPTION.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TERRITORYDESCRIPTION\nfrom Assignment2.NWT.raw_territory\nwhere TERRITORYDESCRIPTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TERRITORYDESCRIPTION", "file_key_name": "models.raw_territory", "attached_node": "model.ADO_Assignment_updated.raw_territory"}, "test.ADO_Assignment_updated.not_null_raw_territory_REGIONID.4d46c58c9c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "REGIONID", "model": "{{ get_where_subquery(ref('raw_territory')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_territory_REGIONID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_territory_REGIONID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_territory_REGIONID.4d46c58c9c", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_territory_REGIONID"], "alias": "not_null_raw_territory_REGIONID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_territory_REGIONID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1557004, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_territory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_territory"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_territory_REGIONID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect REGIONID\nfrom Assignment2.NWT.raw_territory\nwhere REGIONID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "REGIONID", "file_key_name": "models.raw_territory", "attached_node": "model.ADO_Assignment_updated.raw_territory"}, "test.ADO_Assignment_updated.unique_raw_supplier_SUPPLIERID.4fa3096d2c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "SUPPLIERID", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_supplier_SUPPLIERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_supplier_SUPPLIERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_supplier_SUPPLIERID.4fa3096d2c", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_supplier_SUPPLIERID"], "alias": "unique_raw_supplier_SUPPLIERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_supplier_SUPPLIERID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1576948, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_supplier_SUPPLIERID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    SUPPLIERID as unique_field,\n    count(*) as n_records\n\nfrom Assignment2.NWT.raw_supplier\nwhere SUPPLIERID is not null\ngroup by SUPPLIERID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "SUPPLIERID", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_SUPPLIERID.9e09d89419": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUPPLIERID", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_SUPPLIERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_SUPPLIERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_SUPPLIERID.9e09d89419", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_SUPPLIERID"], "alias": "not_null_raw_supplier_SUPPLIERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_SUPPLIERID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1586914, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_SUPPLIERID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SUPPLIERID\nfrom Assignment2.NWT.raw_supplier\nwhere SUPPLIERID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "SUPPLIERID", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_COMPANYNAME.59cd98e54b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "COMPANYNAME", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_COMPANYNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_COMPANYNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_COMPANYNAME.59cd98e54b", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_COMPANYNAME"], "alias": "not_null_raw_supplier_COMPANYNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_COMPANYNAME.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.161202, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_COMPANYNAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect COMPANYNAME\nfrom Assignment2.NWT.raw_supplier\nwhere COMPANYNAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "COMPANYNAME", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_CONTACTNAME.52f7a2401c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTACTNAME", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_CONTACTNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_CONTACTNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_CONTACTNAME.52f7a2401c", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_CONTACTNAME"], "alias": "not_null_raw_supplier_CONTACTNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_CONTACTNAME.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1637025, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_CONTACTNAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CONTACTNAME\nfrom Assignment2.NWT.raw_supplier\nwhere CONTACTNAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CONTACTNAME", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_CONTACTTITLE.bc9bbd2940": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTACTTITLE", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_CONTACTTITLE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_CONTACTTITLE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_CONTACTTITLE.bc9bbd2940", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_CONTACTTITLE"], "alias": "not_null_raw_supplier_CONTACTTITLE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_CONTACTTITLE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1656985, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_CONTACTTITLE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CONTACTTITLE\nfrom Assignment2.NWT.raw_supplier\nwhere CONTACTTITLE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CONTACTTITLE", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_ADDRESS.16dd8c1275": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_ADDRESS", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_ADDRESS.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_ADDRESS.16dd8c1275", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_ADDRESS"], "alias": "not_null_raw_supplier_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_ADDRESS.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1666956, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ADDRESS\nfrom Assignment2.NWT.raw_supplier\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_CITY.27a819d4cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CITY", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_CITY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_CITY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_CITY.27a819d4cb", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_CITY"], "alias": "not_null_raw_supplier_CITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_CITY.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1686885, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_CITY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CITY\nfrom Assignment2.NWT.raw_supplier\nwhere CITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CITY", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_REGION.b8b00e728c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "REGION", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_REGION", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_REGION.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_REGION.b8b00e728c", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_REGION"], "alias": "not_null_raw_supplier_REGION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_REGION.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1706822, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_REGION.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect REGION\nfrom Assignment2.NWT.raw_supplier\nwhere REGION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "REGION", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_POSTALCODE.03fd324125": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "POSTALCODE", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_POSTALCODE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_POSTALCODE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_POSTALCODE.03fd324125", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_POSTALCODE"], "alias": "not_null_raw_supplier_POSTALCODE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_POSTALCODE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1721842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_POSTALCODE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect POSTALCODE\nfrom Assignment2.NWT.raw_supplier\nwhere POSTALCODE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "POSTALCODE", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_COUNTRY.45b10c3cc4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_COUNTRY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_COUNTRY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_COUNTRY.45b10c3cc4", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_COUNTRY"], "alias": "not_null_raw_supplier_COUNTRY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_COUNTRY.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1744206, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_COUNTRY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect COUNTRY\nfrom Assignment2.NWT.raw_supplier\nwhere COUNTRY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "COUNTRY", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_PHONE.649cd181f3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PHONE", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_PHONE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_PHONE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_PHONE.649cd181f3", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_PHONE"], "alias": "not_null_raw_supplier_PHONE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_PHONE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1764152, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_PHONE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PHONE\nfrom Assignment2.NWT.raw_supplier\nwhere PHONE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PHONE", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_FAX.0111d2bf00": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "FAX", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_FAX", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_FAX.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_FAX.0111d2bf00", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_FAX"], "alias": "not_null_raw_supplier_FAX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_FAX.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.178408, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_FAX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect FAX\nfrom Assignment2.NWT.raw_supplier\nwhere FAX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "FAX", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.not_null_raw_supplier_HOMEPAGE.d3bc157eca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "HOMEPAGE", "model": "{{ get_where_subquery(ref('raw_supplier')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_supplier_HOMEPAGE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_supplier_HOMEPAGE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_supplier_HOMEPAGE.d3bc157eca", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_supplier_HOMEPAGE"], "alias": "not_null_raw_supplier_HOMEPAGE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_HOMEPAGE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1804018, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_supplier", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_supplier"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_supplier_HOMEPAGE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect HOMEPAGE\nfrom Assignment2.NWT.raw_supplier\nwhere HOMEPAGE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "HOMEPAGE", "file_key_name": "models.raw_supplier", "attached_node": "model.ADO_Assignment_updated.raw_supplier"}, "test.ADO_Assignment_updated.unique_raw_shipper_SHIPPERID.0bceb7926a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "SHIPPERID", "model": "{{ get_where_subquery(ref('raw_shipper')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_shipper_SHIPPERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_shipper_SHIPPERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_shipper_SHIPPERID.0bceb7926a", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_shipper_SHIPPERID"], "alias": "unique_raw_shipper_SHIPPERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_shipper_SHIPPERID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1813986, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_shipper", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_shipper"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_shipper_SHIPPERID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    SHIPPERID as unique_field,\n    count(*) as n_records\n\nfrom Assignment2.NWT.raw_shipper\nwhere SHIPPERID is not null\ngroup by SHIPPERID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPPERID", "file_key_name": "models.raw_shipper", "attached_node": "model.ADO_Assignment_updated.raw_shipper"}, "test.ADO_Assignment_updated.not_null_raw_shipper_SHIPPERID.7042220e71": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPPERID", "model": "{{ get_where_subquery(ref('raw_shipper')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_shipper_SHIPPERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_shipper_SHIPPERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_shipper_SHIPPERID.7042220e71", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_shipper_SHIPPERID"], "alias": "not_null_raw_shipper_SHIPPERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_shipper_SHIPPERID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1838996, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_shipper", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_shipper"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_shipper_SHIPPERID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SHIPPERID\nfrom Assignment2.NWT.raw_shipper\nwhere SHIPPERID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPPERID", "file_key_name": "models.raw_shipper", "attached_node": "model.ADO_Assignment_updated.raw_shipper"}, "test.ADO_Assignment_updated.not_null_raw_shipper_COMPANYNAME.8065e7d978": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "COMPANYNAME", "model": "{{ get_where_subquery(ref('raw_shipper')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_shipper_COMPANYNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_shipper_COMPANYNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_shipper_COMPANYNAME.8065e7d978", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_shipper_COMPANYNAME"], "alias": "not_null_raw_shipper_COMPANYNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_shipper_COMPANYNAME.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.185896, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_shipper", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_shipper"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_shipper_COMPANYNAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect COMPANYNAME\nfrom Assignment2.NWT.raw_shipper\nwhere COMPANYNAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "COMPANYNAME", "file_key_name": "models.raw_shipper", "attached_node": "model.ADO_Assignment_updated.raw_shipper"}, "test.ADO_Assignment_updated.not_null_raw_shipper_PHONE.e97237a9cd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PHONE", "model": "{{ get_where_subquery(ref('raw_shipper')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_shipper_PHONE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_shipper_PHONE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_shipper_PHONE.e97237a9cd", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_shipper_PHONE"], "alias": "not_null_raw_shipper_PHONE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_shipper_PHONE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516962.1868913, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_shipper", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_shipper"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_shipper_PHONE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PHONE\nfrom Assignment2.NWT.raw_shipper\nwhere PHONE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PHONE", "file_key_name": "models.raw_shipper", "attached_node": "model.ADO_Assignment_updated.raw_shipper"}, "model.ADO_Assignment_updated.raw_customer": {"database": "Assignment2", "schema": "NWT", "name": "raw_customer", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_customer.sql", "original_file_path": "models\\raw\\raw_customer.sql", "unique_id": "model.ADO_Assignment_updated.raw_customer", "fqn": ["ADO_Assignment_updated", "raw", "raw_customer"], "alias": "raw_customer", "checksum": {"name": "sha256", "checksum": "47ffd73f2c15dcd0bf5a7ce3f72d90f8fee9b6010d5d8aa4e6ef1cd5dbf6637c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"CUSTOMERID": {"name": "CUSTOMERID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMPANYNAME": {"name": "COMPANYNAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CONTACTNAME": {"name": "CONTACTNAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CONTACTTITLE": {"name": "CONTACTTITLE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CITY": {"name": "CITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REGION": {"name": "REGION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POSTALCODE": {"name": "POSTALCODE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COUNTRY": {"name": "COUNTRY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PHONE": {"name": "PHONE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FAX": {"name": "FAX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ADO_Assignment_updated://models\\raw\\raw_test.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1704516985.5873253, "relation_name": "Assignment2.NWT.raw_customer", "raw_code": "{{ config (materialized='table')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.CUSTOMER", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.ADO_Assignment_updated.not_null_raw_customer_CUSTOMERID.ee8002510b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUSTOMERID", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_customer_CUSTOMERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_customer_CUSTOMERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_customer_CUSTOMERID.ee8002510b", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_customer_CUSTOMERID"], "alias": "not_null_raw_customer_CUSTOMERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_CUSTOMERID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.6000292, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_CUSTOMERID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CUSTOMERID\nfrom Assignment2.NWT.raw_customer\nwhere CUSTOMERID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CUSTOMERID", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "test.ADO_Assignment_updated.unique_raw_customer_CUSTOMERID.c8121f6a36": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "CUSTOMERID", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_customer_CUSTOMERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_customer_CUSTOMERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_customer_CUSTOMERID.c8121f6a36", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_customer_CUSTOMERID"], "alias": "unique_raw_customer_CUSTOMERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_customer_CUSTOMERID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.6025565, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_customer_CUSTOMERID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    CUSTOMERID as unique_field,\n    count(*) as n_records\n\nfrom Assignment2.NWT.raw_customer\nwhere CUSTOMERID is not null\ngroup by CUSTOMERID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CUSTOMERID", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "test.ADO_Assignment_updated.not_null_raw_customer_COMPANYNAME.301723dfaa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "COMPANYNAME", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_customer_COMPANYNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_customer_COMPANYNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_customer_COMPANYNAME.301723dfaa", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_customer_COMPANYNAME"], "alias": "not_null_raw_customer_COMPANYNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_COMPANYNAME.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.6039603, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_COMPANYNAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect COMPANYNAME\nfrom Assignment2.NWT.raw_customer\nwhere COMPANYNAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "COMPANYNAME", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "test.ADO_Assignment_updated.not_null_raw_customer_CONTACTNAME.1d44831b7d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTACTNAME", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_customer_CONTACTNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_customer_CONTACTNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_customer_CONTACTNAME.1d44831b7d", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_customer_CONTACTNAME"], "alias": "not_null_raw_customer_CONTACTNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_CONTACTNAME.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.6060388, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_CONTACTNAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CONTACTNAME\nfrom Assignment2.NWT.raw_customer\nwhere CONTACTNAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CONTACTNAME", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "test.ADO_Assignment_updated.not_null_raw_customer_CONTACTTITLE.eeafd97196": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTACTTITLE", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_customer_CONTACTTITLE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_customer_CONTACTTITLE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_customer_CONTACTTITLE.eeafd97196", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_customer_CONTACTTITLE"], "alias": "not_null_raw_customer_CONTACTTITLE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_CONTACTTITLE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.6079495, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_CONTACTTITLE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CONTACTTITLE\nfrom Assignment2.NWT.raw_customer\nwhere CONTACTTITLE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CONTACTTITLE", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "test.ADO_Assignment_updated.not_null_raw_customer_ADDRESS.6a7bdce0a2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_customer_ADDRESS", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_customer_ADDRESS.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_customer_ADDRESS.6a7bdce0a2", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_customer_ADDRESS"], "alias": "not_null_raw_customer_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_ADDRESS.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.608974, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ADDRESS\nfrom Assignment2.NWT.raw_customer\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "test.ADO_Assignment_updated.not_null_raw_customer_CITY.aa36e0c281": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CITY", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_customer_CITY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_customer_CITY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_customer_CITY.aa36e0c281", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_customer_CITY"], "alias": "not_null_raw_customer_CITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_CITY.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.61106, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_CITY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CITY\nfrom Assignment2.NWT.raw_customer\nwhere CITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CITY", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "test.ADO_Assignment_updated.not_null_raw_customer_POSTALCODE.007e549e9e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "POSTALCODE", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_customer_POSTALCODE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_customer_POSTALCODE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_customer_POSTALCODE.007e549e9e", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_customer_POSTALCODE"], "alias": "not_null_raw_customer_POSTALCODE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_POSTALCODE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.613217, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_POSTALCODE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect POSTALCODE\nfrom Assignment2.NWT.raw_customer\nwhere POSTALCODE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "POSTALCODE", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "test.ADO_Assignment_updated.not_null_raw_customer_COUNTRY.b1d66866be": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_customer_COUNTRY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_customer_COUNTRY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_customer_COUNTRY.b1d66866be", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_customer_COUNTRY"], "alias": "not_null_raw_customer_COUNTRY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_COUNTRY.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.6146207, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_COUNTRY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect COUNTRY\nfrom Assignment2.NWT.raw_customer\nwhere COUNTRY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "COUNTRY", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "test.ADO_Assignment_updated.not_null_raw_customer_PHONE.5a1e2a85de": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PHONE", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_customer_PHONE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_customer_PHONE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_customer_PHONE.5a1e2a85de", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_customer_PHONE"], "alias": "not_null_raw_customer_PHONE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_PHONE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.6166115, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_PHONE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PHONE\nfrom Assignment2.NWT.raw_customer\nwhere PHONE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PHONE", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "test.ADO_Assignment_updated.not_null_raw_customer_FAX.4174023347": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "FAX", "model": "{{ get_where_subquery(ref('raw_customer')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_customer_FAX", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_customer_FAX.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_customer_FAX.4174023347", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_customer_FAX"], "alias": "not_null_raw_customer_FAX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_FAX.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704516985.6186047, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_customer"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_customer_FAX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect FAX\nfrom Assignment2.NWT.raw_customer\nwhere FAX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "FAX", "file_key_name": "models.raw_customer", "attached_node": "model.ADO_Assignment_updated.raw_customer"}, "model.ADO_Assignment_updated.raw_product": {"database": "Assignment2", "schema": "NWT", "name": "raw_product", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_product.sql", "original_file_path": "models\\raw\\raw_product.sql", "unique_id": "model.ADO_Assignment_updated.raw_product", "fqn": ["ADO_Assignment_updated", "raw", "raw_product"], "alias": "raw_product", "checksum": {"name": "sha256", "checksum": "f5fd72f15c85d7f4e74d124281186f429a3bd277dafd691cbca0bb123f29960c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"PRODUCTID": {"name": "PRODUCTID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PRODUCTNAME": {"name": "PRODUCTNAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SUPPLIERID": {"name": "SUPPLIERID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CATEGORYID": {"name": "CATEGORYID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "QUANTITYPERUNIT": {"name": "QUANTITYPERUNIT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNITPRICE": {"name": "UNITPRICE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNITSINSTOCK": {"name": "UNITSINSTOCK", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNITSONORDER": {"name": "UNITSONORDER", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REORDERLEVEL": {"name": "REORDERLEVEL", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DISCONTINUED": {"name": "DISCONTINUED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "accepted_values": null, "values": ["0", "1"]}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ADO_Assignment_updated://models\\raw\\raw_test.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1704521414.7516434, "relation_name": "Assignment2.NWT.raw_product", "raw_code": "{{ config (materialized='table')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.PRODUCT", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.ADO_Assignment_updated.raw_employee": {"database": "Assignment2", "schema": "NWT", "name": "raw_employee", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_employee.sql", "original_file_path": "models\\raw\\raw_employee.sql", "unique_id": "model.ADO_Assignment_updated.raw_employee", "fqn": ["ADO_Assignment_updated", "raw", "raw_employee"], "alias": "raw_employee", "checksum": {"name": "sha256", "checksum": "73a5f21c3f82037353f821d3ed19ac1fc50162b577e244b003cbd1474d0d1f3b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"EMPLOYEEID": {"name": "EMPLOYEEID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LASTNAME": {"name": "LASTNAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FIRSTNAME": {"name": "FIRSTNAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TITLEOFCOURTESY": {"name": "TITLEOFCOURTESY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BIRTHDATE": {"name": "BIRTHDATE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HIREDATE": {"name": "HIREDATE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CITY": {"name": "CITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REGION": {"name": "REGION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POSTALCODE": {"name": "POSTALCODE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COUNTRY": {"name": "COUNTRY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HOMEPHONE": {"name": "HOMEPHONE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EXTENSION": {"name": "EXTENSION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PHOTO": {"name": "PHOTO", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NOTES": {"name": "NOTES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REPORTSTO": {"name": "REPORTSTO", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PHOTOPATH": {"name": "PHOTOPATH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ADO_Assignment_updated://models\\raw\\raw_test.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1704521414.75756, "relation_name": "Assignment2.NWT.raw_employee", "raw_code": "{{ config (materialized='table')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.EMPLOYEE", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.ADO_Assignment_updated.unique_raw_product_PRODUCTID.ea950a3f3c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "PRODUCTID", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_product_PRODUCTID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_product_PRODUCTID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_product_PRODUCTID.ea950a3f3c", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_product_PRODUCTID"], "alias": "unique_raw_product_PRODUCTID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_product_PRODUCTID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.7815711, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_product_PRODUCTID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    PRODUCTID as unique_field,\n    count(*) as n_records\n\nfrom Assignment2.NWT.raw_product\nwhere PRODUCTID is not null\ngroup by PRODUCTID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PRODUCTID", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.not_null_raw_product_PRODUCTID.d305c64bee": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRODUCTID", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_product_PRODUCTID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_product_PRODUCTID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_product_PRODUCTID.d305c64bee", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_product_PRODUCTID"], "alias": "not_null_raw_product_PRODUCTID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_PRODUCTID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.7853224, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_PRODUCTID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PRODUCTID\nfrom Assignment2.NWT.raw_product\nwhere PRODUCTID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PRODUCTID", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.not_null_raw_product_PRODUCTNAME.d46b570895": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRODUCTNAME", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_product_PRODUCTNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_product_PRODUCTNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_product_PRODUCTNAME.d46b570895", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_product_PRODUCTNAME"], "alias": "not_null_raw_product_PRODUCTNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_PRODUCTNAME.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.786402, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_PRODUCTNAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PRODUCTNAME\nfrom Assignment2.NWT.raw_product\nwhere PRODUCTNAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PRODUCTNAME", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.unique_raw_product_PRODUCTNAME.d089f9bc2f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "PRODUCTNAME", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_product_PRODUCTNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_product_PRODUCTNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_product_PRODUCTNAME.d089f9bc2f", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_product_PRODUCTNAME"], "alias": "unique_raw_product_PRODUCTNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_product_PRODUCTNAME.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.7897313, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_product_PRODUCTNAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    PRODUCTNAME as unique_field,\n    count(*) as n_records\n\nfrom Assignment2.NWT.raw_product\nwhere PRODUCTNAME is not null\ngroup by PRODUCTNAME\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PRODUCTNAME", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.not_null_raw_product_SUPPLIERID.5219f85664": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUPPLIERID", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_product_SUPPLIERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_product_SUPPLIERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_product_SUPPLIERID.5219f85664", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_product_SUPPLIERID"], "alias": "not_null_raw_product_SUPPLIERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_SUPPLIERID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.791847, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_SUPPLIERID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect SUPPLIERID\nfrom Assignment2.NWT.raw_product\nwhere SUPPLIERID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "SUPPLIERID", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.not_null_raw_product_CATEGORYID.b64c8cb3d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CATEGORYID", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_product_CATEGORYID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_product_CATEGORYID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_product_CATEGORYID.b64c8cb3d5", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_product_CATEGORYID"], "alias": "not_null_raw_product_CATEGORYID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_CATEGORYID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.793568, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_CATEGORYID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CATEGORYID\nfrom Assignment2.NWT.raw_product\nwhere CATEGORYID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CATEGORYID", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.not_null_raw_product_QUANTITYPERUNIT.53ba39ed70": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "QUANTITYPERUNIT", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_product_QUANTITYPERUNIT", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_product_QUANTITYPERUNIT.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_product_QUANTITYPERUNIT.53ba39ed70", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_product_QUANTITYPERUNIT"], "alias": "not_null_raw_product_QUANTITYPERUNIT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_QUANTITYPERUNIT.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.7964377, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_QUANTITYPERUNIT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect QUANTITYPERUNIT\nfrom Assignment2.NWT.raw_product\nwhere QUANTITYPERUNIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "QUANTITYPERUNIT", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.not_null_raw_product_UNITPRICE.fe92210a0f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNITPRICE", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_product_UNITPRICE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_product_UNITPRICE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_product_UNITPRICE.fe92210a0f", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_product_UNITPRICE"], "alias": "not_null_raw_product_UNITPRICE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_UNITPRICE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.7984266, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_UNITPRICE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect UNITPRICE\nfrom Assignment2.NWT.raw_product\nwhere UNITPRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "UNITPRICE", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.not_null_raw_product_UNITSINSTOCK.1c8f726a1d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNITSINSTOCK", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_product_UNITSINSTOCK", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_product_UNITSINSTOCK.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_product_UNITSINSTOCK.1c8f726a1d", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_product_UNITSINSTOCK"], "alias": "not_null_raw_product_UNITSINSTOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_UNITSINSTOCK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.800706, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_UNITSINSTOCK.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect UNITSINSTOCK\nfrom Assignment2.NWT.raw_product\nwhere UNITSINSTOCK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "UNITSINSTOCK", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.not_null_raw_product_UNITSONORDER.d1d4de972c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNITSONORDER", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_product_UNITSONORDER", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_product_UNITSONORDER.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_product_UNITSONORDER.d1d4de972c", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_product_UNITSONORDER"], "alias": "not_null_raw_product_UNITSONORDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_UNITSONORDER.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8017423, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_UNITSONORDER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect UNITSONORDER\nfrom Assignment2.NWT.raw_product\nwhere UNITSONORDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "UNITSONORDER", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.not_null_raw_product_REORDERLEVEL.13c1c3d414": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "REORDERLEVEL", "model": "{{ get_where_subquery(ref('raw_product')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_product_REORDERLEVEL", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_product_REORDERLEVEL.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_product_REORDERLEVEL.13c1c3d414", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_product_REORDERLEVEL"], "alias": "not_null_raw_product_REORDERLEVEL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_REORDERLEVEL.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8034766, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_product"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_product_REORDERLEVEL.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect REORDERLEVEL\nfrom Assignment2.NWT.raw_product\nwhere REORDERLEVEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "REORDERLEVEL", "file_key_name": "models.raw_product", "attached_node": "model.ADO_Assignment_updated.raw_product"}, "test.ADO_Assignment_updated.unique_raw_employee_EMPLOYEEID.e56e40dfcf": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "EMPLOYEEID", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_employee_EMPLOYEEID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_employee_EMPLOYEEID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_employee_EMPLOYEEID.e56e40dfcf", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_employee_EMPLOYEEID"], "alias": "unique_raw_employee_EMPLOYEEID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_employee_EMPLOYEEID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8055646, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\unique_raw_employee_EMPLOYEEID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    EMPLOYEEID as unique_field,\n    count(*) as n_records\n\nfrom Assignment2.NWT.raw_employee\nwhere EMPLOYEEID is not null\ngroup by EMPLOYEEID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "EMPLOYEEID", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_EMPLOYEEID.2515546764": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMPLOYEEID", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_EMPLOYEEID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_EMPLOYEEID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_EMPLOYEEID.2515546764", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_EMPLOYEEID"], "alias": "not_null_raw_employee_EMPLOYEEID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_EMPLOYEEID.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8077612, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_EMPLOYEEID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect EMPLOYEEID\nfrom Assignment2.NWT.raw_employee\nwhere EMPLOYEEID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "EMPLOYEEID", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_LASTNAME.69b7ae228b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LASTNAME", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_LASTNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_LASTNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_LASTNAME.69b7ae228b", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_LASTNAME"], "alias": "not_null_raw_employee_LASTNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_LASTNAME.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.80987, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_LASTNAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LASTNAME\nfrom Assignment2.NWT.raw_employee\nwhere LASTNAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "LASTNAME", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_FIRSTNAME.4813af3a97": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "FIRSTNAME", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_FIRSTNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_FIRSTNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_FIRSTNAME.4813af3a97", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_FIRSTNAME"], "alias": "not_null_raw_employee_FIRSTNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_FIRSTNAME.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.812165, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_FIRSTNAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect FIRSTNAME\nfrom Assignment2.NWT.raw_employee\nwhere FIRSTNAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "FIRSTNAME", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_TITLE.4f149e8452": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TITLE", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_TITLE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_TITLE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_TITLE.4f149e8452", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_TITLE"], "alias": "not_null_raw_employee_TITLE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_TITLE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.815694, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_TITLE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TITLE\nfrom Assignment2.NWT.raw_employee\nwhere TITLE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TITLE", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_TITLEOFCOURTESY.f9a816c70c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TITLEOFCOURTESY", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_TITLEOFCOURTESY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_TITLEOFCOURTESY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_TITLEOFCOURTESY.f9a816c70c", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_TITLEOFCOURTESY"], "alias": "not_null_raw_employee_TITLEOFCOURTESY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_TITLEOFCOURTESY.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8167682, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_TITLEOFCOURTESY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect TITLEOFCOURTESY\nfrom Assignment2.NWT.raw_employee\nwhere TITLEOFCOURTESY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "TITLEOFCOURTESY", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_BIRTHDATE.ea3741de94": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BIRTHDATE", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_BIRTHDATE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_BIRTHDATE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_BIRTHDATE.ea3741de94", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_BIRTHDATE"], "alias": "not_null_raw_employee_BIRTHDATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_BIRTHDATE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.818937, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_BIRTHDATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BIRTHDATE\nfrom Assignment2.NWT.raw_employee\nwhere BIRTHDATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "BIRTHDATE", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_HIREDATE.d76496560a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "HIREDATE", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_HIREDATE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_HIREDATE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_HIREDATE.d76496560a", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_HIREDATE"], "alias": "not_null_raw_employee_HIREDATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_HIREDATE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8200228, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_HIREDATE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect HIREDATE\nfrom Assignment2.NWT.raw_employee\nwhere HIREDATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "HIREDATE", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_ADDRESS.34ffb47a63": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_ADDRESS", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_ADDRESS.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_ADDRESS.34ffb47a63", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_ADDRESS"], "alias": "not_null_raw_employee_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_ADDRESS.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.822303, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ADDRESS\nfrom Assignment2.NWT.raw_employee\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_CITY.335538c4fe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CITY", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_CITY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_CITY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_CITY.335538c4fe", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_CITY"], "alias": "not_null_raw_employee_CITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_CITY.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8238895, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_CITY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CITY\nfrom Assignment2.NWT.raw_employee\nwhere CITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CITY", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_REGION.88500b69de": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "REGION", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_REGION", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_REGION.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_REGION.88500b69de", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_REGION"], "alias": "not_null_raw_employee_REGION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_REGION.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8260374, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_REGION.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect REGION\nfrom Assignment2.NWT.raw_employee\nwhere REGION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "REGION", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_POSTALCODE.4d35adb76c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "POSTALCODE", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_POSTALCODE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_POSTALCODE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_POSTALCODE.4d35adb76c", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_POSTALCODE"], "alias": "not_null_raw_employee_POSTALCODE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_POSTALCODE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8271317, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_POSTALCODE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect POSTALCODE\nfrom Assignment2.NWT.raw_employee\nwhere POSTALCODE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "POSTALCODE", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_COUNTRY.602bb16d1a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTRY", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_COUNTRY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_COUNTRY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_COUNTRY.602bb16d1a", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_COUNTRY"], "alias": "not_null_raw_employee_COUNTRY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_COUNTRY.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.830553, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_COUNTRY.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect COUNTRY\nfrom Assignment2.NWT.raw_employee\nwhere COUNTRY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "COUNTRY", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_HOMEPHONE.5bec1ae158": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "HOMEPHONE", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_HOMEPHONE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_HOMEPHONE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_HOMEPHONE.5bec1ae158", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_HOMEPHONE"], "alias": "not_null_raw_employee_HOMEPHONE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_HOMEPHONE.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8314724, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_HOMEPHONE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect HOMEPHONE\nfrom Assignment2.NWT.raw_employee\nwhere HOMEPHONE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "HOMEPHONE", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_EXTENSION.ad8dbf9e40": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTENSION", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_EXTENSION", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_EXTENSION.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_EXTENSION.ad8dbf9e40", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_EXTENSION"], "alias": "not_null_raw_employee_EXTENSION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_EXTENSION.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8342314, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_EXTENSION.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect EXTENSION\nfrom Assignment2.NWT.raw_employee\nwhere EXTENSION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "EXTENSION", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_PHOTO.58ff133dde": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PHOTO", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_PHOTO", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_PHOTO.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_PHOTO.58ff133dde", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_PHOTO"], "alias": "not_null_raw_employee_PHOTO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_PHOTO.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8357599, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_PHOTO.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PHOTO\nfrom Assignment2.NWT.raw_employee\nwhere PHOTO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PHOTO", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_NOTES.b7deefc299": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NOTES", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_NOTES", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_NOTES.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_NOTES.b7deefc299", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_NOTES"], "alias": "not_null_raw_employee_NOTES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_NOTES.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8377535, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_NOTES.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect NOTES\nfrom Assignment2.NWT.raw_employee\nwhere NOTES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "NOTES", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_REPORTSTO.cb6dfbeacf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "REPORTSTO", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_REPORTSTO", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_REPORTSTO.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_REPORTSTO.cb6dfbeacf", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_REPORTSTO"], "alias": "not_null_raw_employee_REPORTSTO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_REPORTSTO.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8387496, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_REPORTSTO.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect REPORTSTO\nfrom Assignment2.NWT.raw_employee\nwhere REPORTSTO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "REPORTSTO", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.relationships_raw_employee_REPORTSTO__employeeID__ref_raw_employee_.7a35cbd27a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('raw_employee')", "field": "employeeID", "column_name": "REPORTSTO", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "relationships_raw_employee_REPORTSTO__employeeID__ref_raw_employee_", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "relationships_raw_employee_7288afe19a92fb2404588d9c3323227a.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.relationships_raw_employee_REPORTSTO__employeeID__ref_raw_employee_.7a35cbd27a", "fqn": ["ADO_Assignment_updated", "raw", "relationships_raw_employee_REPORTSTO__employeeID__ref_raw_employee_"], "alias": "relationships_raw_employee_7288afe19a92fb2404588d9c3323227a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_raw_employee_7288afe19a92fb2404588d9c3323227a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\relationships_raw_employee_7288afe19a92fb2404588d9c3323227a.sql", "deferred": false, "unrendered_config": {"alias": "relationships_raw_employee_7288afe19a92fb2404588d9c3323227a"}, "created_at": 1704521414.840745, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_raw_employee_7288afe19a92fb2404588d9c3323227a\") }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}, {"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee", "model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\relationships_raw_employee_7288afe19a92fb2404588d9c3323227a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select REPORTSTO as from_field\n    from Assignment2.NWT.raw_employee\n    where REPORTSTO is not null\n),\n\nparent as (\n    select employeeID as to_field\n    from Assignment2.NWT.raw_employee\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "REPORTSTO", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "test.ADO_Assignment_updated.not_null_raw_employee_PHOTOPATH.64324f2c34": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PHOTOPATH", "model": "{{ get_where_subquery(ref('raw_employee')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_employee_PHOTOPATH", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_employee_PHOTOPATH.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_employee_PHOTOPATH.64324f2c34", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_employee_PHOTOPATH"], "alias": "not_null_raw_employee_PHOTOPATH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_PHOTOPATH.sql", "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8516436, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.ADO_Assignment_updated.raw_employee"]}, "compiled_path": "target\\compiled\\ADO_Assignment_updated\\models\\raw\\raw_test.yml\\not_null_raw_employee_PHOTOPATH.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect PHOTOPATH\nfrom Assignment2.NWT.raw_employee\nwhere PHOTOPATH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "PHOTOPATH", "file_key_name": "models.raw_employee", "attached_node": "model.ADO_Assignment_updated.raw_employee"}, "model.ADO_Assignment_updated.raw_orders": {"database": "Assignment2", "schema": "NWT", "name": "raw_orders", "resource_type": "model", "package_name": "ADO_Assignment_updated", "path": "raw\\raw_orders.sql", "original_file_path": "models\\raw\\raw_orders.sql", "unique_id": "model.ADO_Assignment_updated.raw_orders", "fqn": ["ADO_Assignment_updated", "raw", "raw_orders"], "alias": "raw_orders", "checksum": {"name": "sha256", "checksum": "12e09fa4b7200af1973200939b8c1e11b39813a44aee50093844dbb8fadf2cbb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1704526093.209127, "relation_name": "Assignment2.NWT.raw_orders", "raw_code": "{{ config (materialized='table')}}\r\n\r\nSELECT * FROM ASSIGNMENT2.NWT.\"ORDER\"\r\n\r\nUPDATE raw_orders SET orderdate = DATEADD(YEAR, 1900, orderdate) -- add 1900 to dates with years 0096, 0097 and 0098\r\nWHERE orderdate < '1900-01-01';\r\n\r\nUPDATE raw_orders SET requireddate = DATEADD(YEAR, 1900, requireddate) -- add 1900 to dates with years 0096, 0097 and 0098\r\nWHERE requireddate < '1900-01-01';\r\n\r\nUPDATE raw_orders SET shippeddate = DATEADD(YEAR, 1900, shippeddate) -- add 1900 to dates with years 0096, 0097 and 0098\r\nWHERE shippeddate < '1900-01-01';\r\n\r\nselect * from raw_orders", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}}, "sources": {}, "macros": {"macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.4927146, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.493715, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.4947147, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.4957113, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.4957113, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.496708, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.4977045, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many objects in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.498702, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.498702, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.498702, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.499698, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.499698, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5006945, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5006945, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5006945, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5006945, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5006945, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.502319, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5033176, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5033176, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5043137, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5043137, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5043137, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.505313, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5083032, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5127926, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5137925, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5147915, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5147915, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.515788, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5177813, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.518778, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.518778, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5223806, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5233786, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5233786, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5233786, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5243764, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5243764, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5243764, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5253756, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5253756, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5253756, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5253756, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5263722, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5263722, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5263722, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5263722, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5283654, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5283654, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5283654, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5293622, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5293622, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5293622, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5303593, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5303593, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5303593, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5313554, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5313554, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5313554, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.532352, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.532855, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.532855, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.532855, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5348544, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5368478, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5368478, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5378444, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5378444, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5378444, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.538841, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5398376, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5398376, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5398376, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5408342, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5408342, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5408342, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5424254, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5434227, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5434227, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.54442, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.54442, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.54442, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5454192, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5454192, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5474916, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5484896, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5484896, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5484896, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5484896, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5494616, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5494616, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5494616, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5504105, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5504105, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5513995, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5513995, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5513995, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5513995, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5524666, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5530496, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5561755, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5561755, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5561755, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5571718, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5571718, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5581696, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5581696, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5581696, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5581696, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5581696, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5581696, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.559774, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.559774, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.560868, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.560868, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.560868, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.560868, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5624535, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5624535, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5624535, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5624535, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5624535, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5640213, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5640213, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5640213, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5650258, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5650258, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5650258, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5650258, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5650258, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5661016, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5661016, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.568022, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5700161, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5710113, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5710113, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5745466, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5765407, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5765407, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5790389, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5795426, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5795426, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5795426, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5805433, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5815396, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5815396, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5815396, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.582536, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5830393, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5830393, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5840392, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5840392, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5840392, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5860348, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5860348, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5860348, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5860348, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5870316, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.589026, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.589026, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.590022, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.591021, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.591021, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5986133, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.5996099, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6051958, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6071894, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6081865, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6091828, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6091828, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6101801, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6156707, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.617664, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6186612, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.620654, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.620654, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.620654, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6222553, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6222553, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6222553, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6232536, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6232536, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6232536, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6232536, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.624251, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.624251, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6252515, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6252515, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6262476, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6262476, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6262476, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6282408, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6292374, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6292374, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6302345, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6302345, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.631231, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6322277, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.632731, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.632731, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.632731, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n    /* Do the equivalent of rename_if_exists */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6367233, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6387167, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6387167, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6387167, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6397135, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.640727, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.640727, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.640727, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    /* Do the equivalent of rename_if_exists */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6452444, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6502287, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6512153, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6512153, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6527488, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6527488, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6527488, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6527488, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6527488, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6537523, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6537523, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6537523, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6547601, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6567423, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6612842, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6658149, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6658149, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6668117, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6668117, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6668117, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6668117, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.667809, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6688051, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6688051, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6688051, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.669801, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6783462, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6793423, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6793423, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6828582, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6838775, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6838775, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6848683, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6848683, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6848683, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6868615, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6888437, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6898422, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6898422, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6924143, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6924143, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6935134, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.695524, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.695524, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6964898, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6964898, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6974874, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.698483, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.698483, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.698483, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.698483, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6994815, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6994815, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6994815, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.6994815, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7004137, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7004137, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7014034, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7014034, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7014034, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7014034, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7014034, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7024705, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7030573, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7030573, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7030573, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7041314, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7041314, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7041314, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7041314, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7041314, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7051263, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7051263, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7051263, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7051263, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7051263, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7060509, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7060509, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7060509, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7070467, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7070467, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7070467, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7070467, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7080815, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7080815, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7080815, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7080815, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7091103, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7091103, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7091103, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7091103, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7101076, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7101076, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7101076, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7101076, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7111452, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7111452, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7120774, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7126539, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7126539, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7126539, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7126539, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7136643, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7136643, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7136643, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7136643, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7147605, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7147605, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7157283, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7157283, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7157283, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7167504, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7167504, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7167504, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704516961.7177217, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.ADO_Assignment_updated.unique_raw_orders_ORDERID.7327f3267f": [{"test_metadata": {"name": "unique", "kwargs": {"column_name": "ORDERID", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_orders_ORDERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_orders_ORDERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_orders_ORDERID.7327f3267f", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_orders_ORDERID"], "alias": "unique_raw_orders_ORDERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0105891, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ORDERID", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ORDERID", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "unique_raw_orders_ORDERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "unique_raw_orders_ORDERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.unique_raw_orders_ORDERID.7327f3267f", "fqn": ["ADO_Assignment_updated", "raw", "unique_raw_orders_ORDERID"], "alias": "unique_raw_orders_ORDERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8533804, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ORDERID", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_ORDERID.249a43d7b5": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORDERID", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_ORDERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_ORDERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_ORDERID.249a43d7b5", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_ORDERID"], "alias": "not_null_raw_orders_ORDERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0132165, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ORDERID", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORDERID", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_ORDERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_ORDERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_ORDERID.249a43d7b5", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_ORDERID"], "alias": "not_null_raw_orders_ORDERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8554463, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ORDERID", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_CUSTOMERID.47afb40a5e": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUSTOMERID", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_CUSTOMERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_CUSTOMERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_CUSTOMERID.47afb40a5e", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_CUSTOMERID"], "alias": "not_null_raw_orders_CUSTOMERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0151193, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "CUSTOMERID", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUSTOMERID", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_CUSTOMERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_CUSTOMERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_CUSTOMERID.47afb40a5e", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_CUSTOMERID"], "alias": "not_null_raw_orders_CUSTOMERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.856465, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "CUSTOMERID", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_EMPLOYEEID.3dbc5d3ef4": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMPLOYEEID", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_EMPLOYEEID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_EMPLOYEEID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_EMPLOYEEID.3dbc5d3ef4", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_EMPLOYEEID"], "alias": "not_null_raw_orders_EMPLOYEEID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0171125, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "EMPLOYEEID", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMPLOYEEID", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_EMPLOYEEID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_EMPLOYEEID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_EMPLOYEEID.3dbc5d3ef4", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_EMPLOYEEID"], "alias": "not_null_raw_orders_EMPLOYEEID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8584492, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "EMPLOYEEID", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_ORDERDATE.c8ccb6cce5": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORDERDATE", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_ORDERDATE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_ORDERDATE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_ORDERDATE.c8ccb6cce5", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_ORDERDATE"], "alias": "not_null_raw_orders_ORDERDATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0191057, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ORDERDATE", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORDERDATE", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_ORDERDATE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_ORDERDATE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_ORDERDATE.c8ccb6cce5", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_ORDERDATE"], "alias": "not_null_raw_orders_ORDERDATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8604317, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ORDERDATE", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_REQUIREDDATE.015bb7ad68": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "REQUIREDDATE", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_REQUIREDDATE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_REQUIREDDATE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_REQUIREDDATE.015bb7ad68", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_REQUIREDDATE"], "alias": "not_null_raw_orders_REQUIREDDATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0210996, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "REQUIREDDATE", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "REQUIREDDATE", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_REQUIREDDATE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_REQUIREDDATE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_REQUIREDDATE.015bb7ad68", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_REQUIREDDATE"], "alias": "not_null_raw_orders_REQUIREDDATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8623497, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "REQUIREDDATE", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_SHIPPEDDATE.50af66ed25": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPPEDDATE", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPPEDDATE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPPEDDATE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPPEDDATE.50af66ed25", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPPEDDATE"], "alias": "not_null_raw_orders_SHIPPEDDATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.022603, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPPEDDATE", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPPEDDATE", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPPEDDATE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPPEDDATE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPPEDDATE.50af66ed25", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPPEDDATE"], "alias": "not_null_raw_orders_SHIPPEDDATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8633463, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPPEDDATE", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_SHIPVIA.8c021f6f29": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPVIA", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPVIA", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPVIA.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPVIA.8c021f6f29", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPVIA"], "alias": "not_null_raw_orders_SHIPVIA", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0246162, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPVIA", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPVIA", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPVIA", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPVIA.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPVIA.8c021f6f29", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPVIA"], "alias": "not_null_raw_orders_SHIPVIA", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8659272, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPVIA", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_FREIGHT.66366d16f4": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "FREIGHT", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_FREIGHT", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_FREIGHT.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_FREIGHT.66366d16f4", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_FREIGHT"], "alias": "not_null_raw_orders_FREIGHT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0266135, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "FREIGHT", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "FREIGHT", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_FREIGHT", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_FREIGHT.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_FREIGHT.66366d16f4", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_FREIGHT"], "alias": "not_null_raw_orders_FREIGHT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8668966, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "FREIGHT", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_SHIPNAME.4ce717c31f": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPNAME", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPNAME.4ce717c31f", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPNAME"], "alias": "not_null_raw_orders_SHIPNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0286062, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPNAME", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPNAME", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPNAME", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPNAME.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPNAME.4ce717c31f", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPNAME"], "alias": "not_null_raw_orders_SHIPNAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8688996, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPNAME", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_SHIPADDRESS.f8677930c7": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPADDRESS", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPADDRESS", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPADDRESS.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPADDRESS.f8677930c7", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPADDRESS"], "alias": "not_null_raw_orders_SHIPADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0305994, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPADDRESS", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPADDRESS", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPADDRESS", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPADDRESS.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPADDRESS.f8677930c7", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPADDRESS"], "alias": "not_null_raw_orders_SHIPADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8698862, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPADDRESS", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_SHIPCITY.b01663b92e": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPCITY", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPCITY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPCITY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPCITY.b01663b92e", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPCITY"], "alias": "not_null_raw_orders_SHIPCITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.032188, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPCITY", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPCITY", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPCITY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPCITY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPCITY.b01663b92e", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPCITY"], "alias": "not_null_raw_orders_SHIPCITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8725142, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPCITY", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_SHIPREGION.939eeafa26": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPREGION", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPREGION", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPREGION.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPREGION.939eeafa26", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPREGION"], "alias": "not_null_raw_orders_SHIPREGION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0341837, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPREGION", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPREGION", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPREGION", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPREGION.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPREGION.939eeafa26", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPREGION"], "alias": "not_null_raw_orders_SHIPREGION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8742285, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPREGION", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_SHIPPOSTALCODE.f43aeffcde": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPPOSTALCODE", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPPOSTALCODE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPPOSTALCODE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPPOSTALCODE.f43aeffcde", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPPOSTALCODE"], "alias": "not_null_raw_orders_SHIPPOSTALCODE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0361803, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPPOSTALCODE", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPPOSTALCODE", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPPOSTALCODE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPPOSTALCODE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPPOSTALCODE.f43aeffcde", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPPOSTALCODE"], "alias": "not_null_raw_orders_SHIPPOSTALCODE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.876278, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPPOSTALCODE", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_orders_SHIPCOUNTRY.6d10ab56b6": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPCOUNTRY", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPCOUNTRY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPCOUNTRY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPCOUNTRY.6d10ab56b6", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPCOUNTRY"], "alias": "not_null_raw_orders_SHIPCOUNTRY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0371768, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPCOUNTRY", "file_key_name": "models.raw_orders", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHIPCOUNTRY", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_orders_SHIPCOUNTRY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_orders_SHIPCOUNTRY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_orders_SHIPCOUNTRY.6d10ab56b6", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_orders_SHIPCOUNTRY"], "alias": "not_null_raw_orders_SHIPCOUNTRY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.877201, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPCOUNTRY", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_order_detail_ORDERID.b3ae436193": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORDERID", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_order_detail_ORDERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_order_detail_ORDERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_order_detail_ORDERID.b3ae436193", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_order_detail_ORDERID"], "alias": "not_null_raw_order_detail_ORDERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0391707, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ORDERID", "file_key_name": "models.raw_order_detail", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORDERID", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_order_detail_ORDERID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_order_detail_ORDERID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_order_detail_ORDERID.b3ae436193", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_order_detail_ORDERID"], "alias": "not_null_raw_order_detail_ORDERID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.8919013, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ORDERID", "file_key_name": "models.raw_order_detail", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_order_detail_PRODUCTID.7d6a616a3a": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRODUCTID", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_order_detail_PRODUCTID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_order_detail_PRODUCTID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_order_detail_PRODUCTID.7d6a616a3a", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_order_detail_PRODUCTID"], "alias": "not_null_raw_order_detail_PRODUCTID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0421753, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "PRODUCTID", "file_key_name": "models.raw_order_detail", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRODUCTID", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_order_detail_PRODUCTID", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_order_detail_PRODUCTID.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_order_detail_PRODUCTID.7d6a616a3a", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_order_detail_PRODUCTID"], "alias": "not_null_raw_order_detail_PRODUCTID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.9006248, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "PRODUCTID", "file_key_name": "models.raw_order_detail", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_order_detail_UNITPRICE.c4deac9f1d": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNITPRICE", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_order_detail_UNITPRICE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_order_detail_UNITPRICE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_order_detail_UNITPRICE.c4deac9f1d", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_order_detail_UNITPRICE"], "alias": "not_null_raw_order_detail_UNITPRICE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0436797, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "UNITPRICE", "file_key_name": "models.raw_order_detail", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNITPRICE", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_order_detail_UNITPRICE", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_order_detail_UNITPRICE.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_order_detail_UNITPRICE.c4deac9f1d", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_order_detail_UNITPRICE"], "alias": "not_null_raw_order_detail_UNITPRICE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.9015436, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "UNITPRICE", "file_key_name": "models.raw_order_detail", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_order_detail_QUANTITY.4cfee37f49": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "QUANTITY", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_order_detail_QUANTITY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_order_detail_QUANTITY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_order_detail_QUANTITY.4cfee37f49", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_order_detail_QUANTITY"], "alias": "not_null_raw_order_detail_QUANTITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0456765, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "QUANTITY", "file_key_name": "models.raw_order_detail", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "QUANTITY", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_order_detail_QUANTITY", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_order_detail_QUANTITY.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_order_detail_QUANTITY.4cfee37f49", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_order_detail_QUANTITY"], "alias": "not_null_raw_order_detail_QUANTITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.9043224, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "QUANTITY", "file_key_name": "models.raw_order_detail", "attached_node": null}], "test.ADO_Assignment_updated.not_null_raw_order_detail_DISCOUNT.3bd288f219": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "DISCOUNT", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_order_detail_DISCOUNT", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_order_detail_DISCOUNT.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_order_detail_DISCOUNT.3bd288f219", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_order_detail_DISCOUNT"], "alias": "not_null_raw_order_detail_DISCOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704516962.0476694, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "DISCOUNT", "file_key_name": "models.raw_order_detail", "attached_node": null}, {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "DISCOUNT", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "not_null_raw_order_detail_DISCOUNT", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "not_null_raw_order_detail_DISCOUNT.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.not_null_raw_order_detail_DISCOUNT.3bd288f219", "fqn": ["ADO_Assignment_updated", "raw", "not_null_raw_order_detail_DISCOUNT"], "alias": "not_null_raw_order_detail_DISCOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704521414.9066541, "config_call_dict": {}, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "DISCOUNT", "file_key_name": "models.raw_order_detail", "attached_node": null}], "test.ADO_Assignment_updated.accepted_values_raw_orders_SHIPCOUNTRY__USA__Germany__Brazil__France__UK__Venezuela__Austria__Sweden__Canada__Mexico__Italy__Spain__Finland__Belgium__Ireland__Denmark__Switzerland__Argentina__Portugal__Poland__Norway.5da29e1a48": [{"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["USA", "Germany", "Brazil", "France", "UK", "Venezuela", "Austria", "Sweden", "Canada", "Mexico", "Italy", "Spain", "Finland", "Belgium", "Ireland", "Denmark", "Switzerland", "Argentina", "Portugal", "Poland", "Norway"], "column_name": "SHIPCOUNTRY", "model": "{{ get_where_subquery(ref('raw_orders')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "accepted_values_raw_orders_SHIPCOUNTRY__USA__Germany__Brazil__France__UK__Venezuela__Austria__Sweden__Canada__Mexico__Italy__Spain__Finland__Belgium__Ireland__Denmark__Switzerland__Argentina__Portugal__Poland__Norway", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "accepted_values_raw_orders_010b01a2d0dd430034761cfcb01d4610.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.accepted_values_raw_orders_SHIPCOUNTRY__USA__Germany__Brazil__France__UK__Venezuela__Austria__Sweden__Canada__Mexico__Italy__Spain__Finland__Belgium__Ireland__Denmark__Switzerland__Argentina__Portugal__Poland__Norway.5da29e1a48", "fqn": ["ADO_Assignment_updated", "raw", "accepted_values_raw_orders_SHIPCOUNTRY__USA__Germany__Brazil__France__UK__Venezuela__Austria__Sweden__Canada__Mexico__Italy__Spain__Finland__Belgium__Ireland__Denmark__Switzerland__Argentina__Portugal__Poland__Norway"], "alias": "accepted_values_raw_orders_010b01a2d0dd430034761cfcb01d4610", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "accepted_values_raw_orders_010b01a2d0dd430034761cfcb01d4610", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_raw_orders_010b01a2d0dd430034761cfcb01d4610"}, "created_at": 1704521414.8792753, "config_call_dict": {"alias": "accepted_values_raw_orders_010b01a2d0dd430034761cfcb01d4610"}, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_raw_orders_010b01a2d0dd430034761cfcb01d4610\") }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "SHIPCOUNTRY", "file_key_name": "models.raw_orders", "attached_node": null}], "test.ADO_Assignment_updated.relationships_raw_order_detail_ORDERID__ORDERID__ref_raw_orders_.c646ed49e8": [{"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('raw_orders')", "field": "ORDERID", "column_name": "ORDERID", "model": "{{ get_where_subquery(ref('raw_order_detail')) }}"}, "namespace": null}, "database": "Assignment2", "schema": "NWT_dbt_test__audit", "name": "relationships_raw_order_detail_ORDERID__ORDERID__ref_raw_orders_", "resource_type": "test", "package_name": "ADO_Assignment_updated", "path": "relationships_raw_order_detail_4ef1dc4b5e5f681e718397cacadd4b15.sql", "original_file_path": "models\\raw\\raw_test.yml", "unique_id": "test.ADO_Assignment_updated.relationships_raw_order_detail_ORDERID__ORDERID__ref_raw_orders_.c646ed49e8", "fqn": ["ADO_Assignment_updated", "raw", "relationships_raw_order_detail_ORDERID__ORDERID__ref_raw_orders_"], "alias": "relationships_raw_order_detail_4ef1dc4b5e5f681e718397cacadd4b15", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "relationships_raw_order_detail_4ef1dc4b5e5f681e718397cacadd4b15", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_raw_order_detail_4ef1dc4b5e5f681e718397cacadd4b15"}, "created_at": 1704521414.8945656, "config_call_dict": {"alias": "relationships_raw_order_detail_4ef1dc4b5e5f681e718397cacadd4b15"}, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_raw_order_detail_4ef1dc4b5e5f681e718397cacadd4b15\") }}", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}, {"name": "raw_order_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ORDERID", "file_key_name": "models.raw_order_detail", "attached_node": null}]}, "parent_map": {"model.ADO_Assignment_updated.raw_category": [], "model.ADO_Assignment_updated.raw_employee_territory": [], "model.ADO_Assignment_updated.raw_order_details": [], "model.ADO_Assignment_updated.raw_region": [], "model.ADO_Assignment_updated.raw_shipper": [], "model.ADO_Assignment_updated.raw_supplier": [], "model.ADO_Assignment_updated.raw_territory": [], "test.ADO_Assignment_updated.unique_raw_category_CATEGORYID.a1b8a7eaa8": ["model.ADO_Assignment_updated.raw_category"], "test.ADO_Assignment_updated.not_null_raw_category_CATEGORYID.3b1d8fbba2": ["model.ADO_Assignment_updated.raw_category"], "test.ADO_Assignment_updated.not_null_raw_category_CATEGORYNAME.a317f17f5b": ["model.ADO_Assignment_updated.raw_category"], "test.ADO_Assignment_updated.not_null_raw_category_DESCRIPTION.2133efedca": ["model.ADO_Assignment_updated.raw_category"], "test.ADO_Assignment_updated.not_null_raw_category_PICTURE.c5c3735301": ["model.ADO_Assignment_updated.raw_category"], "test.ADO_Assignment_updated.not_null_raw_employee_territory_EMPLOYEEID.9d44243c38": ["model.ADO_Assignment_updated.raw_employee_territory"], "test.ADO_Assignment_updated.not_null_raw_employee_territory_TERRITORYID.d1114c5961": ["model.ADO_Assignment_updated.raw_employee_territory"], "test.ADO_Assignment_updated.unique_raw_region_REGIONID.22984d02c1": ["model.ADO_Assignment_updated.raw_region"], "test.ADO_Assignment_updated.not_null_raw_region_REGIONID.edf655c866": ["model.ADO_Assignment_updated.raw_region"], "test.ADO_Assignment_updated.not_null_raw_region_REGIONDESCRIPTION.8d19875120": ["model.ADO_Assignment_updated.raw_region"], "test.ADO_Assignment_updated.unique_raw_territory_TERRITORYID.761def669e": ["model.ADO_Assignment_updated.raw_territory"], "test.ADO_Assignment_updated.not_null_raw_territory_TERRITORYID.c3a89952f0": ["model.ADO_Assignment_updated.raw_territory"], "test.ADO_Assignment_updated.not_null_raw_territory_TERRITORYDESCRIPTION.b0601fdc23": ["model.ADO_Assignment_updated.raw_territory"], "test.ADO_Assignment_updated.not_null_raw_territory_REGIONID.4d46c58c9c": ["model.ADO_Assignment_updated.raw_territory"], "test.ADO_Assignment_updated.unique_raw_supplier_SUPPLIERID.4fa3096d2c": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_SUPPLIERID.9e09d89419": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_COMPANYNAME.59cd98e54b": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_CONTACTNAME.52f7a2401c": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_CONTACTTITLE.bc9bbd2940": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_ADDRESS.16dd8c1275": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_CITY.27a819d4cb": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_REGION.b8b00e728c": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_POSTALCODE.03fd324125": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_COUNTRY.45b10c3cc4": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_PHONE.649cd181f3": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_FAX.0111d2bf00": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.not_null_raw_supplier_HOMEPAGE.d3bc157eca": ["model.ADO_Assignment_updated.raw_supplier"], "test.ADO_Assignment_updated.unique_raw_shipper_SHIPPERID.0bceb7926a": ["model.ADO_Assignment_updated.raw_shipper"], "test.ADO_Assignment_updated.not_null_raw_shipper_SHIPPERID.7042220e71": ["model.ADO_Assignment_updated.raw_shipper"], "test.ADO_Assignment_updated.not_null_raw_shipper_COMPANYNAME.8065e7d978": ["model.ADO_Assignment_updated.raw_shipper"], "test.ADO_Assignment_updated.not_null_raw_shipper_PHONE.e97237a9cd": ["model.ADO_Assignment_updated.raw_shipper"], "model.ADO_Assignment_updated.raw_customer": [], "test.ADO_Assignment_updated.not_null_raw_customer_CUSTOMERID.ee8002510b": ["model.ADO_Assignment_updated.raw_customer"], "test.ADO_Assignment_updated.unique_raw_customer_CUSTOMERID.c8121f6a36": ["model.ADO_Assignment_updated.raw_customer"], "test.ADO_Assignment_updated.not_null_raw_customer_COMPANYNAME.301723dfaa": ["model.ADO_Assignment_updated.raw_customer"], "test.ADO_Assignment_updated.not_null_raw_customer_CONTACTNAME.1d44831b7d": ["model.ADO_Assignment_updated.raw_customer"], "test.ADO_Assignment_updated.not_null_raw_customer_CONTACTTITLE.eeafd97196": ["model.ADO_Assignment_updated.raw_customer"], "test.ADO_Assignment_updated.not_null_raw_customer_ADDRESS.6a7bdce0a2": ["model.ADO_Assignment_updated.raw_customer"], "test.ADO_Assignment_updated.not_null_raw_customer_CITY.aa36e0c281": ["model.ADO_Assignment_updated.raw_customer"], "test.ADO_Assignment_updated.not_null_raw_customer_POSTALCODE.007e549e9e": ["model.ADO_Assignment_updated.raw_customer"], "test.ADO_Assignment_updated.not_null_raw_customer_COUNTRY.b1d66866be": ["model.ADO_Assignment_updated.raw_customer"], "test.ADO_Assignment_updated.not_null_raw_customer_PHONE.5a1e2a85de": ["model.ADO_Assignment_updated.raw_customer"], "test.ADO_Assignment_updated.not_null_raw_customer_FAX.4174023347": ["model.ADO_Assignment_updated.raw_customer"], "model.ADO_Assignment_updated.raw_product": [], "model.ADO_Assignment_updated.raw_employee": [], "test.ADO_Assignment_updated.unique_raw_product_PRODUCTID.ea950a3f3c": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.not_null_raw_product_PRODUCTID.d305c64bee": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.not_null_raw_product_PRODUCTNAME.d46b570895": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.unique_raw_product_PRODUCTNAME.d089f9bc2f": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.not_null_raw_product_SUPPLIERID.5219f85664": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.not_null_raw_product_CATEGORYID.b64c8cb3d5": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.not_null_raw_product_QUANTITYPERUNIT.53ba39ed70": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.not_null_raw_product_UNITPRICE.fe92210a0f": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.not_null_raw_product_UNITSINSTOCK.1c8f726a1d": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.not_null_raw_product_UNITSONORDER.d1d4de972c": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.not_null_raw_product_REORDERLEVEL.13c1c3d414": ["model.ADO_Assignment_updated.raw_product"], "test.ADO_Assignment_updated.unique_raw_employee_EMPLOYEEID.e56e40dfcf": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_EMPLOYEEID.2515546764": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_LASTNAME.69b7ae228b": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_FIRSTNAME.4813af3a97": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_TITLE.4f149e8452": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_TITLEOFCOURTESY.f9a816c70c": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_BIRTHDATE.ea3741de94": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_HIREDATE.d76496560a": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_ADDRESS.34ffb47a63": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_CITY.335538c4fe": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_REGION.88500b69de": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_POSTALCODE.4d35adb76c": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_COUNTRY.602bb16d1a": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_HOMEPHONE.5bec1ae158": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_EXTENSION.ad8dbf9e40": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_PHOTO.58ff133dde": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_NOTES.b7deefc299": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_REPORTSTO.cb6dfbeacf": ["model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.relationships_raw_employee_REPORTSTO__employeeID__ref_raw_employee_.7a35cbd27a": ["model.ADO_Assignment_updated.raw_employee", "model.ADO_Assignment_updated.raw_employee"], "test.ADO_Assignment_updated.not_null_raw_employee_PHOTOPATH.64324f2c34": ["model.ADO_Assignment_updated.raw_employee"], "model.ADO_Assignment_updated.raw_orders": []}, "child_map": {"model.ADO_Assignment_updated.raw_category": ["test.ADO_Assignment_updated.not_null_raw_category_CATEGORYID.3b1d8fbba2", "test.ADO_Assignment_updated.not_null_raw_category_CATEGORYNAME.a317f17f5b", "test.ADO_Assignment_updated.not_null_raw_category_DESCRIPTION.2133efedca", "test.ADO_Assignment_updated.not_null_raw_category_PICTURE.c5c3735301", "test.ADO_Assignment_updated.unique_raw_category_CATEGORYID.a1b8a7eaa8"], "model.ADO_Assignment_updated.raw_employee_territory": ["test.ADO_Assignment_updated.not_null_raw_employee_territory_EMPLOYEEID.9d44243c38", "test.ADO_Assignment_updated.not_null_raw_employee_territory_TERRITORYID.d1114c5961"], "model.ADO_Assignment_updated.raw_order_details": [], "model.ADO_Assignment_updated.raw_region": ["test.ADO_Assignment_updated.not_null_raw_region_REGIONDESCRIPTION.8d19875120", "test.ADO_Assignment_updated.not_null_raw_region_REGIONID.edf655c866", "test.ADO_Assignment_updated.unique_raw_region_REGIONID.22984d02c1"], "model.ADO_Assignment_updated.raw_shipper": ["test.ADO_Assignment_updated.not_null_raw_shipper_COMPANYNAME.8065e7d978", "test.ADO_Assignment_updated.not_null_raw_shipper_PHONE.e97237a9cd", "test.ADO_Assignment_updated.not_null_raw_shipper_SHIPPERID.7042220e71", "test.ADO_Assignment_updated.unique_raw_shipper_SHIPPERID.0bceb7926a"], "model.ADO_Assignment_updated.raw_supplier": ["test.ADO_Assignment_updated.not_null_raw_supplier_ADDRESS.16dd8c1275", "test.ADO_Assignment_updated.not_null_raw_supplier_CITY.27a819d4cb", "test.ADO_Assignment_updated.not_null_raw_supplier_COMPANYNAME.59cd98e54b", "test.ADO_Assignment_updated.not_null_raw_supplier_CONTACTNAME.52f7a2401c", "test.ADO_Assignment_updated.not_null_raw_supplier_CONTACTTITLE.bc9bbd2940", "test.ADO_Assignment_updated.not_null_raw_supplier_COUNTRY.45b10c3cc4", "test.ADO_Assignment_updated.not_null_raw_supplier_FAX.0111d2bf00", "test.ADO_Assignment_updated.not_null_raw_supplier_HOMEPAGE.d3bc157eca", "test.ADO_Assignment_updated.not_null_raw_supplier_PHONE.649cd181f3", "test.ADO_Assignment_updated.not_null_raw_supplier_POSTALCODE.03fd324125", "test.ADO_Assignment_updated.not_null_raw_supplier_REGION.b8b00e728c", "test.ADO_Assignment_updated.not_null_raw_supplier_SUPPLIERID.9e09d89419", "test.ADO_Assignment_updated.unique_raw_supplier_SUPPLIERID.4fa3096d2c"], "model.ADO_Assignment_updated.raw_territory": ["test.ADO_Assignment_updated.not_null_raw_territory_REGIONID.4d46c58c9c", "test.ADO_Assignment_updated.not_null_raw_territory_TERRITORYDESCRIPTION.b0601fdc23", "test.ADO_Assignment_updated.not_null_raw_territory_TERRITORYID.c3a89952f0", "test.ADO_Assignment_updated.unique_raw_territory_TERRITORYID.761def669e"], "test.ADO_Assignment_updated.unique_raw_category_CATEGORYID.a1b8a7eaa8": [], "test.ADO_Assignment_updated.not_null_raw_category_CATEGORYID.3b1d8fbba2": [], "test.ADO_Assignment_updated.not_null_raw_category_CATEGORYNAME.a317f17f5b": [], "test.ADO_Assignment_updated.not_null_raw_category_DESCRIPTION.2133efedca": [], "test.ADO_Assignment_updated.not_null_raw_category_PICTURE.c5c3735301": [], "test.ADO_Assignment_updated.not_null_raw_employee_territory_EMPLOYEEID.9d44243c38": [], "test.ADO_Assignment_updated.not_null_raw_employee_territory_TERRITORYID.d1114c5961": [], "test.ADO_Assignment_updated.unique_raw_region_REGIONID.22984d02c1": [], "test.ADO_Assignment_updated.not_null_raw_region_REGIONID.edf655c866": [], "test.ADO_Assignment_updated.not_null_raw_region_REGIONDESCRIPTION.8d19875120": [], "test.ADO_Assignment_updated.unique_raw_territory_TERRITORYID.761def669e": [], "test.ADO_Assignment_updated.not_null_raw_territory_TERRITORYID.c3a89952f0": [], "test.ADO_Assignment_updated.not_null_raw_territory_TERRITORYDESCRIPTION.b0601fdc23": [], "test.ADO_Assignment_updated.not_null_raw_territory_REGIONID.4d46c58c9c": [], "test.ADO_Assignment_updated.unique_raw_supplier_SUPPLIERID.4fa3096d2c": [], "test.ADO_Assignment_updated.not_null_raw_supplier_SUPPLIERID.9e09d89419": [], "test.ADO_Assignment_updated.not_null_raw_supplier_COMPANYNAME.59cd98e54b": [], "test.ADO_Assignment_updated.not_null_raw_supplier_CONTACTNAME.52f7a2401c": [], "test.ADO_Assignment_updated.not_null_raw_supplier_CONTACTTITLE.bc9bbd2940": [], "test.ADO_Assignment_updated.not_null_raw_supplier_ADDRESS.16dd8c1275": [], "test.ADO_Assignment_updated.not_null_raw_supplier_CITY.27a819d4cb": [], "test.ADO_Assignment_updated.not_null_raw_supplier_REGION.b8b00e728c": [], "test.ADO_Assignment_updated.not_null_raw_supplier_POSTALCODE.03fd324125": [], "test.ADO_Assignment_updated.not_null_raw_supplier_COUNTRY.45b10c3cc4": [], "test.ADO_Assignment_updated.not_null_raw_supplier_PHONE.649cd181f3": [], "test.ADO_Assignment_updated.not_null_raw_supplier_FAX.0111d2bf00": [], "test.ADO_Assignment_updated.not_null_raw_supplier_HOMEPAGE.d3bc157eca": [], "test.ADO_Assignment_updated.unique_raw_shipper_SHIPPERID.0bceb7926a": [], "test.ADO_Assignment_updated.not_null_raw_shipper_SHIPPERID.7042220e71": [], "test.ADO_Assignment_updated.not_null_raw_shipper_COMPANYNAME.8065e7d978": [], "test.ADO_Assignment_updated.not_null_raw_shipper_PHONE.e97237a9cd": [], "model.ADO_Assignment_updated.raw_customer": ["test.ADO_Assignment_updated.not_null_raw_customer_ADDRESS.6a7bdce0a2", "test.ADO_Assignment_updated.not_null_raw_customer_CITY.aa36e0c281", "test.ADO_Assignment_updated.not_null_raw_customer_COMPANYNAME.301723dfaa", "test.ADO_Assignment_updated.not_null_raw_customer_CONTACTNAME.1d44831b7d", "test.ADO_Assignment_updated.not_null_raw_customer_CONTACTTITLE.eeafd97196", "test.ADO_Assignment_updated.not_null_raw_customer_COUNTRY.b1d66866be", "test.ADO_Assignment_updated.not_null_raw_customer_CUSTOMERID.ee8002510b", "test.ADO_Assignment_updated.not_null_raw_customer_FAX.4174023347", "test.ADO_Assignment_updated.not_null_raw_customer_PHONE.5a1e2a85de", "test.ADO_Assignment_updated.not_null_raw_customer_POSTALCODE.007e549e9e", "test.ADO_Assignment_updated.unique_raw_customer_CUSTOMERID.c8121f6a36"], "test.ADO_Assignment_updated.not_null_raw_customer_CUSTOMERID.ee8002510b": [], "test.ADO_Assignment_updated.unique_raw_customer_CUSTOMERID.c8121f6a36": [], "test.ADO_Assignment_updated.not_null_raw_customer_COMPANYNAME.301723dfaa": [], "test.ADO_Assignment_updated.not_null_raw_customer_CONTACTNAME.1d44831b7d": [], "test.ADO_Assignment_updated.not_null_raw_customer_CONTACTTITLE.eeafd97196": [], "test.ADO_Assignment_updated.not_null_raw_customer_ADDRESS.6a7bdce0a2": [], "test.ADO_Assignment_updated.not_null_raw_customer_CITY.aa36e0c281": [], "test.ADO_Assignment_updated.not_null_raw_customer_POSTALCODE.007e549e9e": [], "test.ADO_Assignment_updated.not_null_raw_customer_COUNTRY.b1d66866be": [], "test.ADO_Assignment_updated.not_null_raw_customer_PHONE.5a1e2a85de": [], "test.ADO_Assignment_updated.not_null_raw_customer_FAX.4174023347": [], "model.ADO_Assignment_updated.raw_product": ["test.ADO_Assignment_updated.not_null_raw_product_CATEGORYID.b64c8cb3d5", "test.ADO_Assignment_updated.not_null_raw_product_PRODUCTID.d305c64bee", "test.ADO_Assignment_updated.not_null_raw_product_PRODUCTNAME.d46b570895", "test.ADO_Assignment_updated.not_null_raw_product_QUANTITYPERUNIT.53ba39ed70", "test.ADO_Assignment_updated.not_null_raw_product_REORDERLEVEL.13c1c3d414", "test.ADO_Assignment_updated.not_null_raw_product_SUPPLIERID.5219f85664", "test.ADO_Assignment_updated.not_null_raw_product_UNITPRICE.fe92210a0f", "test.ADO_Assignment_updated.not_null_raw_product_UNITSINSTOCK.1c8f726a1d", "test.ADO_Assignment_updated.not_null_raw_product_UNITSONORDER.d1d4de972c", "test.ADO_Assignment_updated.unique_raw_product_PRODUCTID.ea950a3f3c", "test.ADO_Assignment_updated.unique_raw_product_PRODUCTNAME.d089f9bc2f"], "model.ADO_Assignment_updated.raw_employee": ["test.ADO_Assignment_updated.not_null_raw_employee_ADDRESS.34ffb47a63", "test.ADO_Assignment_updated.not_null_raw_employee_BIRTHDATE.ea3741de94", "test.ADO_Assignment_updated.not_null_raw_employee_CITY.335538c4fe", "test.ADO_Assignment_updated.not_null_raw_employee_COUNTRY.602bb16d1a", "test.ADO_Assignment_updated.not_null_raw_employee_EMPLOYEEID.2515546764", "test.ADO_Assignment_updated.not_null_raw_employee_EXTENSION.ad8dbf9e40", "test.ADO_Assignment_updated.not_null_raw_employee_FIRSTNAME.4813af3a97", "test.ADO_Assignment_updated.not_null_raw_employee_HIREDATE.d76496560a", "test.ADO_Assignment_updated.not_null_raw_employee_HOMEPHONE.5bec1ae158", "test.ADO_Assignment_updated.not_null_raw_employee_LASTNAME.69b7ae228b", "test.ADO_Assignment_updated.not_null_raw_employee_NOTES.b7deefc299", "test.ADO_Assignment_updated.not_null_raw_employee_PHOTO.58ff133dde", "test.ADO_Assignment_updated.not_null_raw_employee_PHOTOPATH.64324f2c34", "test.ADO_Assignment_updated.not_null_raw_employee_POSTALCODE.4d35adb76c", "test.ADO_Assignment_updated.not_null_raw_employee_REGION.88500b69de", "test.ADO_Assignment_updated.not_null_raw_employee_REPORTSTO.cb6dfbeacf", "test.ADO_Assignment_updated.not_null_raw_employee_TITLE.4f149e8452", "test.ADO_Assignment_updated.not_null_raw_employee_TITLEOFCOURTESY.f9a816c70c", "test.ADO_Assignment_updated.relationships_raw_employee_REPORTSTO__employeeID__ref_raw_employee_.7a35cbd27a", "test.ADO_Assignment_updated.relationships_raw_employee_REPORTSTO__employeeID__ref_raw_employee_.7a35cbd27a", "test.ADO_Assignment_updated.unique_raw_employee_EMPLOYEEID.e56e40dfcf"], "test.ADO_Assignment_updated.unique_raw_product_PRODUCTID.ea950a3f3c": [], "test.ADO_Assignment_updated.not_null_raw_product_PRODUCTID.d305c64bee": [], "test.ADO_Assignment_updated.not_null_raw_product_PRODUCTNAME.d46b570895": [], "test.ADO_Assignment_updated.unique_raw_product_PRODUCTNAME.d089f9bc2f": [], "test.ADO_Assignment_updated.not_null_raw_product_SUPPLIERID.5219f85664": [], "test.ADO_Assignment_updated.not_null_raw_product_CATEGORYID.b64c8cb3d5": [], "test.ADO_Assignment_updated.not_null_raw_product_QUANTITYPERUNIT.53ba39ed70": [], "test.ADO_Assignment_updated.not_null_raw_product_UNITPRICE.fe92210a0f": [], "test.ADO_Assignment_updated.not_null_raw_product_UNITSINSTOCK.1c8f726a1d": [], "test.ADO_Assignment_updated.not_null_raw_product_UNITSONORDER.d1d4de972c": [], "test.ADO_Assignment_updated.not_null_raw_product_REORDERLEVEL.13c1c3d414": [], "test.ADO_Assignment_updated.unique_raw_employee_EMPLOYEEID.e56e40dfcf": [], "test.ADO_Assignment_updated.not_null_raw_employee_EMPLOYEEID.2515546764": [], "test.ADO_Assignment_updated.not_null_raw_employee_LASTNAME.69b7ae228b": [], "test.ADO_Assignment_updated.not_null_raw_employee_FIRSTNAME.4813af3a97": [], "test.ADO_Assignment_updated.not_null_raw_employee_TITLE.4f149e8452": [], "test.ADO_Assignment_updated.not_null_raw_employee_TITLEOFCOURTESY.f9a816c70c": [], "test.ADO_Assignment_updated.not_null_raw_employee_BIRTHDATE.ea3741de94": [], "test.ADO_Assignment_updated.not_null_raw_employee_HIREDATE.d76496560a": [], "test.ADO_Assignment_updated.not_null_raw_employee_ADDRESS.34ffb47a63": [], "test.ADO_Assignment_updated.not_null_raw_employee_CITY.335538c4fe": [], "test.ADO_Assignment_updated.not_null_raw_employee_REGION.88500b69de": [], "test.ADO_Assignment_updated.not_null_raw_employee_POSTALCODE.4d35adb76c": [], "test.ADO_Assignment_updated.not_null_raw_employee_COUNTRY.602bb16d1a": [], "test.ADO_Assignment_updated.not_null_raw_employee_HOMEPHONE.5bec1ae158": [], "test.ADO_Assignment_updated.not_null_raw_employee_EXTENSION.ad8dbf9e40": [], "test.ADO_Assignment_updated.not_null_raw_employee_PHOTO.58ff133dde": [], "test.ADO_Assignment_updated.not_null_raw_employee_NOTES.b7deefc299": [], "test.ADO_Assignment_updated.not_null_raw_employee_REPORTSTO.cb6dfbeacf": [], "test.ADO_Assignment_updated.relationships_raw_employee_REPORTSTO__employeeID__ref_raw_employee_.7a35cbd27a": [], "test.ADO_Assignment_updated.not_null_raw_employee_PHOTOPATH.64324f2c34": [], "model.ADO_Assignment_updated.raw_orders": []}, "group_map": {}}
